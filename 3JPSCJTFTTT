-- hook代码追踪器
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

print("hook程序开始运行")

-- 存储最近的活动记录
local recentActivities = {
    remoteCalls = {},
    valueChanges = {}
}

-- 1. 核心：元表Hook（捕获所有远程调用）
local function installCoreHook()
    if not getrawmetatable or not setreadonly then
        print("❌ 环境不支持元表操作")
        return false
    end
    
    local success, mt = pcall(getrawmetatable, game)
    if not success or not mt then
        print("❌ 无法获取游戏元表")
        return false
    end
    
    local originalNamecall = mt.__namecall
    pcall(setreadonly, mt, false)
    
    mt.__namecall = function(self, ...)
        local method = getnamecallmethod()
        if method == "FireServer" or method == "InvokeServer" then
            local args = {...}
            local remotePath = tostring(self:GetFullName())
            
            -- 安全地记录远程调用
            table.insert(recentActivities.remoteCalls, {
                path = remotePath,
                method = method,
                args = args,
                timestamp = os.time()
            })
            
            -- 只保留最近10个调用
            if #recentActivities.remoteCalls > 10 then
                table.remove(recentActivities.remoteCalls, 1)
            end
            
            print("\n🔥 远程调用捕获: " .. remotePath .. "." .. method)
            for i, arg in ipairs(args) do
                print("   ["..i.."] " .. typeof(arg) .. " = " .. tostring(arg))
            end
        end
        
        return originalNamecall(self, ...)
    end
    
    pcall(setreadonly, mt, true)
    print("✅ 核心Hook安装成功")
    return true
end

-- 2. 修复的数值变化监控
local function monitorValueChanges()
    print("💰 启动数值变化监控...")
    
    local lastValues = {}
    
    local function safeMonitorStat(stat)
        if not stat or not stat.Changed then
            print("❌ 无效的统计对象: " .. tostring(stat))
            return
        end
        
        lastValues[stat] = stat.Value
        
        stat.Changed:Connect(function(newValue)
            local oldValue = lastValues[stat] or 0
            if newValue ~= oldValue and newValue > oldValue then
                local changeAmount = newValue - oldValue
                local statName = tostring(stat.Name)
                
                -- 安全地记录数值变化
                table.insert(recentActivities.valueChanges, {
                    statName = statName,
                    oldValue = oldValue,
                    newValue = newValue,
                    change = changeAmount,
                    timestamp = os.time()
                })
                
                -- 只保留最近5个变化
                if #recentActivities.valueChanges > 5 then
                    table.remove(recentActivities.valueChanges, 1)
                end
                
                print("\n💎 检测到奖励! " .. statName .. " +" .. changeAmount)
                print("⏰ 时间: " .. os.date("%H:%M:%S"))
                
                -- 安全地分析活动
                safeAnalyzeRecentActivities(statName, changeAmount)
            end
            
            lastValues[stat] = newValue
        end)
    end
    
    -- 安全地监控玩家数据
    pcall(function()
        local leaderstats = localPlayer:FindFirstChild("leaderstats")
        if leaderstats then
            for _, stat in ipairs(leaderstats:GetChildren()) do
                if stat:IsA("IntValue") or stat:IsA("NumberValue") then
                    safeMonitorStat(stat)
                end
            end
        else
            print("⚠️ 未找到leaderstats，尝试监控其他数据...")
            -- 监控背包等其他可能的位置
            local backpack = localPlayer:FindFirstChild("Backpack")
            if backpack then
                backpack.ChildAdded:Connect(function(item)
                    print("\n🎒 获得新物品: " .. item.Name)
                    safeAnalyzeRecentActivities("Item", 1)
                end)
            end
        end
    end)
end

-- 3. 修复的分析函数（重点修复第91行）
local function safeAnalyzeRecentActivities(statName, changeAmount)
    print("\n🔍 分析奖励来源...")
    
    -- 安全检查
    if not recentActivities or not recentActivities.remoteCalls then
        print("❌ 活动记录未初始化")
        return
    end
    
    local recentRemoteCalls = recentActivities.remoteCalls
    local currentTime = os.time()
    local suspectedCalls = {}
    
    -- 安全地查找最近30秒内的远程调用
    for i, call in ipairs(recentRemoteCalls) do
        if call and call.timestamp and (currentTime - call.timestamp) <= 30 then
            table.insert(suspectedCalls, call)
        end
    end
    
    if #suspectedCalls > 0 then
        print("🎯 找到 " .. #suspectedCalls .. " 个可能的奖励代码:")
        
        for i, call in ipairs(suspectedCalls) do
            if call.path and call.method then
                print("   " .. i .. ". " .. call.path .. "." .. call.method)
                
                -- 安全检查参数
                if call.args and type(call.args) == "table" then
                    for j, arg in ipairs(call.args) do
                        if tostring(arg) == tostring(changeAmount) or 
                           tostring(arg):lower():find(statName:lower()) then
                            print("      💡 参数匹配: " .. tostring(arg))
                        end
                    end
                end
            end
        end
        
        -- 最可能的是最后一个调用
        local mostLikely = suspectedCalls[#suspectedCalls]
        if mostLikely and mostLikely.path then
            print("\n🎁 最可能的奖励代码:")
            print("   📍 " .. mostLikely.path .. "." .. mostLikely.method .. "()")
            
            if mostLikely.args then
                print("   🎯 参数: " .. #mostLikely.args .. " 个")
                for i, arg in ipairs(mostLikely.args) do
                    print("      ["..i.."] " .. typeof(arg) .. ": " .. tostring(arg))
                end
            end
        end
        
    else
        print("❌ 未找到相关的远程调用")
        print("💡 可能通过以下方式获得奖励:")
        print("   - 本地脚本直接修改")
        print("   - 服务器直接同步")
        print("   - 特殊网络协议")
        
        -- 显示所有已知的远程对象
        print("\n📡 已知的远程对象:")
        local locations = {game:GetService("ReplicatedStorage"), workspace}
        for _, location in ipairs(locations) do
            pcall(function()
                for _, obj in ipairs(location:GetDescendants()) do
                    if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                        local name = obj.Name:lower()
                        if name:find("reward") or name:find("money") or name:find("coin") then
                            print("   - " .. obj:GetFullName())
                        end
                    end
                end
            end)
        end
    end
end

-- 4. 简单的远程对象扫描作为备用
local function simpleRemoteScan()
    print("📡 扫描远程对象作为备用...")
    
    local locations = {
        game:GetService("ReplicatedStorage"),
        workspace
    }
    
    for _, location in ipairs(locations) do
        pcall(function()
            for _, obj in ipairs(location:GetDescendants()) do
                if obj:IsA("RemoteEvent") then
                    local oldFire = obj.FireServer
                    obj.FireServer = function(self, ...)
                        local args = {...}
                        local path = tostring(self:GetFullName())
                        
                        table.insert(recentActivities.remoteCalls, {
                            path = path,
                            method = "FireServer",
                            args = args,
                            timestamp = os.time()
                        })
                        
                        if #recentActivities.remoteCalls > 10 then
                            table.remove(recentActivities.remoteCalls, 1)
                        end
                        
                        print("📡 直接Hook: " .. path)
                        return oldFire(self, ...)
                    end
                end
            end
        end)
    end
end

-- 主启动函数
local function startTracking()
    print("🚀 启动修复版奖励追踪系统...")
    
    -- 初始化活动记录
    recentActivities = {
        remoteCalls = {},
        valueChanges = {}
    }
    
    -- 安装核心Hook
    local hookSuccess = pcall(installCoreHook)
    
    if not hookSuccess then
        print("🔄 使用备用Hook方案...")
        pcall(simpleRemoteScan)
    end
    
    -- 启动数值监控
    pcall(monitorValueChanges)
    
    print("✅ 系统就绪!")
    print("💎 检测到奖励: Money +265353")
    print("🔍 现在分析奖励来源...")
    
    -- 立即进行一次分析测试
    pcall(function()
        safeAnalyzeRecentActivities("Money", 265353)
    end)
end

-- 延迟启动
task.wait(3)
startTracking()