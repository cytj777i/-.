-- 超强罗布乐思奖励追踪脚本 - 优化版
-- 确保能在控制台看到奖励触发代码

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

-- 配置区域 - 优化配置
local config = {
    logToFile = false, -- 先关闭文件记录，专注控制台输出
    logFileName = "reward_tracker.log",
    learningMode = true, -- 开启学习模式发现所有事件
    showCallStack = true, -- 显示调用堆栈定位代码
    captureAllRemotes = true, -- 捕获所有远程事件进行学习
    highlightRewards = true,
    simpleOutput = true -- 简化输出格式
}

-- 白名单（学习模式会自动发现并添加）
local whitelist = {
    "RewardEvent", "Reward", "GetReward", "ClaimReward",
    "Award", "Prize", "Loot", "Drop", "Gift", "Bonus",
    "variableserver", "Lab", "Event", "RequestLuckyTool", 
    "TsunamiUIEvent", "DailyReward", "QuestReward", "MissionReward",
    "LevelUp", "Achievement", "Collect", "OpenChest", "SpinWheel",
    "Currency", "Coins", "Gems", "Money", "EXP", "Experience"
}

-- 已发现的远程事件
local discoveredEvents = {}

-- 增强日志函数 - 确保控制台输出
local function logMessage(message, isReward)
    local timestamp = os.date("%H:%M:%S")
    local formattedMessage = ""
    
    if config.simpleOutput then
        -- 简化输出格式
        if isReward then
            formattedMessage = string.format("🎁 [%s] 奖励事件: %s", timestamp, message)
            -- 在支持颜色的环境中使用醒目标记
            if rconsoleprint then
                rconsoleprint("@@LIGHT_RED@@")
                rconsoleprint(formattedMessage)
                rconsoleprint("@@WHITE@@\n")
            else
                print(formattedMessage)
            end
        else
            formattedMessage = string.format("[%s] %s", timestamp, message)
            print(formattedMessage)
        end
    else
        -- 完整输出格式
        local prefix = isReward and "🎁 [奖励事件] " or "[远程监控] "
        formattedMessage = string.format("[%s]%s %s", timestamp, prefix, message)
        print(formattedMessage)
    end
    
    -- 文件记录（可选）
    if config.logToFile and writefile then
        pcall(function()
            if not isfile(config.logFileName) then
                writefile(config.logFileName, "奖励追踪日志\n创建时间: " .. os.date() .. "\n\n")
            end
            appendfile(config.logFileName, formattedMessage .. "\n")
        end)
    end
end

-- 获取调用堆栈 - 定位触发代码的关键
local function getCallStack()
    if not config.showCallStack then
        return ""
    end
    
    local stack = "\n调用堆栈:"
    local foundScript = false
    
    for i = 3, 15 do -- 增加深度以找到更多相关信息
        local info = debug.info(i, "sl")
        if not info or not info.source then break end
        
        local source = string.gsub(info.source, "^@", "")
        local line = info.currentline > 0 and info.currentline or "?"
        
        -- 过滤掉系统脚本，专注于游戏脚本
        if not string.find(source, "CoreScript") and 
           not string.find(source, "CoreGui") and
           not string.find(source, "Promise") then
            
            -- 高亮显示可能的游戏脚本
            local isGameScript = string.find(source, "Workspace") or 
                               string.find(source, "PlayerScripts") or
                               string.find(source, "ReplicatedFirst") or
                               string.find(source, "ReplicatedStorage") or
                               string.find(source, "ServerStorage") or
                               string.find(source, "Lighting")
            
            if isGameScript then
                stack = stack .. string.format("\n%s:%s", source, line)
                foundScript = true
            else
                stack = stack .. string.format("\n   %s:%s", source, line)
            end
        end
    end
    
    if not foundScript then
        stack = stack .. "\n   (未找到明确的游戏脚本位置)"
    end
    
    return stack
end

-- 参数美化函数 - 优化显示
local function prettyArgs(args, depth)
    depth = depth or 0
    if depth > 2 then return "..." end
    
    local out = {}
    
    for i, v in ipairs(args) do
        local vType = typeof(v)
        
        if vType == "table" then
            if next(v) == nil then
                table.insert(out, "{}")
            else
                table.insert(out, "table[...]")
            end
        elseif vType == "Instance" then
            local name = pcall(function() return v.Name end) and v.Name or "Unknown"
            local class = pcall(function() return v.ClassName end) and v.ClassName or "Unknown"
            table.insert(out, string.format("%s[%s]", name, class))
        elseif vType == "Vector3" then
            table.insert(out, string.format("Vector3(%.0f,%.0f,%.0f)", v.X, v.Y, v.Z))
        elseif vType == "CFrame" then
            table.insert(out, "CFrame")
        elseif vType == "number" then
            table.insert(out, tostring(v))
        elseif vType == "string" then
            if #v > 50 then
                table.insert(out, string.format("%q...", v:sub(1, 47)))
            else
                table.insert(out, string.format("%q", v))
            end
        else
            table.insert(out, tostring(v))
        end
    end
    
    return table.concat(out, ", ")
end

-- 检测奖励事件 - 增强检测逻辑
local function isRewardEvent(eventName, args)
    local nameLower = eventName:lower()
    
    -- 奖励关键词检测
    local rewardKeywords = {
        "reward", "prize", "award", "loot", "drop", "gift", "bonus",
        "collect", "chest", "wheel", "daily", "quest", "mission",
        "achievement", "levelup", "level", "win", "victory", "complete",
        "coin", "gem", "money", "cash", "currency", "point", "exp", "experience",
        "token", "crystal", "diamond", "gold", "silver", "bronze"
    }
    
    for _, keyword in ipairs(rewardKeywords) do
        if string.find(nameLower, keyword) then
            return true
        end
    end
    
    -- 参数内容检测
    local argsStr = HttpService:JSONEncode(args):lower()
    local valueIndicators = {
        "amount", "value", "count", "quantity", "points", "exp", "xp",
        "coin", "gem", "money", "cash", "reward", "prize"
    }
    
    for _, indicator in ipairs(valueIndicators) do
        if string.find(argsStr, indicator) then
            return true
        end
    end
    
    return false
end

-- 初始化事件列表
for _, event in ipairs(whitelist) do
    discoveredEvents[event] = true
end

-- 主Hook逻辑 - 确保能捕获所有相关事件
local function setupHooks()
    -- 检查环境兼容性
    if not getrawmetatable or not getnamecallmethod then
        logMessage("当前环境不支持元表Hook，脚本无法运行", false)
        return false
    end
    
    local mt = getrawmetatable(game)
    if not mt then
        logMessage("无法获取游戏元表", false)
        return false
    end
    
    local oldNamecall = mt.__namecall
    if not oldNamecall then
        logMessage("元表缺少__namecall方法", false)
        return false
    end
    
    setreadonly(mt, false)
    
    -- 主Hook函数
    mt.__namecall = function(self, ...)
        local method = getnamecallmethod()
        local success, name = pcall(function() return self.Name end)
        local args = {...}
        
        if success and name and (method == "FireServer" or method == "InvokeServer") then
            local shouldLog = config.captureAllRemotes or 
                             discoveredEvents[name] or 
                             (config.learningMode and not discoveredEvents[name])
            
            if shouldLog then
                -- 学习模式：记录新事件
                if config.learningMode and not discoveredEvents[name] then
                    discoveredEvents[name] = true
                    logMessage("发现新远程事件: " .. name, false)
                end
                
                -- 判断奖励事件
                local isReward = config.highlightRewards and isRewardEvent(name, args)
                
                -- 准备输出信息
                local argString = prettyArgs(args)
                local callStack = getCallStack()
                
                if isReward then
                    logMessage(string.format("🚨 触发奖励: %s.%s(%s)%s", name, method, argString, callStack), true)
                else
                    logMessage(string.format("%s.%s(%s)%s", name, method, argString, callStack), false)
                end
            end
        end
        
        return oldNamecall(self, ...)
    end
    
    setreadonly(mt, true)
    return true
end

-- 启动脚本
logMessage("开始初始化奖励追踪脚本...", false)

local success, err = pcall(function()
    return setupHooks()
end)

if success then
    logMessage("脚本初始化成功! 开始监控游戏奖励...", false)
    logMessage("在游戏中获得奖励时，会显示 🎁 或 🚨 标记的事件", false)
    logMessage("学习模式已开启，正在发现所有远程事件...", false)
    
    -- 添加定期状态报告
    delay(10, function()
        local eventCount = 0
        for _ in pairs(discoveredEvents) do eventCount = eventCount + 1 end
        logMessage(string.format("已发现 %d 个远程事件，继续监控中...", eventCount), false)
    end)
    
else
    logMessage("脚本初始化失败: " .. tostring(err), false)
    logMessage("建议: 尝试在其它执行环境中运行此脚本", false)
end

-- 实用功能
local function showDiscoveredEvents()
    local events = {}
    for name in pairs(discoveredEvents) do
        table.insert(events, name)
    end
    table.sort(events)
    
    logMessage("已发现的远程事件列表:", false)
    for i, event in ipairs(events) do
        logMessage("   " .. i .. ". " .. event, false)
    end
    return events
end

-- 返回控制接口
return {
    showEvents = showDiscoveredEvents,
    toggleLearning = function()
        config.learningMode = not config.learningMode
        logMessage("学习模式: " .. (config.learningMode and "开启" or "关闭"), false)
    end,
    addEvent = function(eventName)
        discoveredEvents[eventName] = true
        logMessage("已监控事件: " .. eventName, false)
    end,
    getStats = function()
        local count = 0
        for _ in pairs(discoveredEvents) do count = count + 1 end
        return {totalEvents = count}
    end
}